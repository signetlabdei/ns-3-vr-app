Bursty Framework
----------------

The framework aims at supporting large packets sent across a network, fragmented into bursts of multiple smaller packets.


Model Description
*****************

This model is described in `[WNS3-2021]`_.
It was originally designed to model an Virtual Reality traffic source, although the bursty framework is more general.


Design
======

Packets are generated by a class extending the ``BurstGenerator`` interface, fragmented into packet bursts by ``BurstyApplication``, and finally received by a ``BurstSink``.
The framework is similar to ``OnOffApplication``-``PacketSink``, but generalized to support large packets fragmented into bursts.

Burst Generator description
###########################

The ``BurstGenerator`` interface defines two methods that child classes have to extend, namely ``GenerateBurst`` and ``HasNextBurst``.
The former generates a packet size and period, while the latter makes sure whether it is possible to generate an additional burst.

The framework comes with three generators already implemented:

- ``SimpleBurstGenerator``: the user can specify ``RandomVariableStream`` for the packet size and period.
- ``TraceFileBurstGenerator``: traffic trace files are imported and executed in ns-3, allowing the user to import real traffic traces into its simulations. Some traces representing a VR traffic source are included.
- ``VrBurstGenerator``: implements a traffic model able to emulate Virtual Reality traffic, as described in `[WNS3-2021]`_.

Bursty Application description
##############################

The ``BurstyApplication`` generates packet bursts based on the information yielded by the attached ``BurstGenerator``.
A ``SeqTsSizeFragHeader`` is attached to each fragment, with information on its transmission time, the burst sequence number, the fragment sequence number, the total burst size, and the total number of fragments of the burst.
This information is then used by the ``BurstSink`` to re-aggregate the burst into a single packet, if possible.

Traces are fired for each transmitted fragment and burst.

Burst Sink description
######################

The ``BurstSink`` tries to re-aggregate fragments into the original packet.
It assumes that the burst transmission duration is relatively small compared to the burst period, and does not perform any Forward Error Correction (FEC).

To do so, it gathers information from SeqTsSizeFragHeader, which all received packets should have.
It then proceeds as follows:

- Being based on a UDP socket, packets might arrive out-of-order. Within a burst, BurstSink will reorder the received packets.
- While receiving burst n, if a fragment from burst k<n is received, the fragment is discarded
- While receiving burst n, if a fragment from burst k>n is received, burst n is discarded and burst k will start being buffered.
- If all fragments from a burst are received, the burst is successfully received.

Traces are fired for each received fragment and burst successfully received.


Usage
*****

This section is principally concerned with the usage of your model, using the public API. Focus first on most common usage patterns, then go into more advanced topics.

Building New Module
===================

First, clone the main ns-3 repository, e.g.,:

``git clone https://gitlab.com/nsnam/ns-3-dev ns-3-dev``

Then, clone the bursty framework module into the ``contrib/`` folder:

``git clone https://github.com/signetlabdei/ns-3-vr-app ns-3-dev/contrib/vr-app``

Configure and build ns-3 from the `ns-3-dev` folder:

| ``./waf configure --enable-tests --enable-examples``
| ``./waf build``

This module does not provide Python bindings at the moment.


Setting up a scenario
=====================

Please reference the examples to understand how to set up a scenario.


Examples
========

For more information, please check the the source files of the provided examples.

Troubleshooting
===============

For any problem with the module, please open an issue. The maintainers will do their best to provide technical support!



References
**********

.. _`[WNS3-2021]`:

[WNS3-2021] Mattia Lecci, Andrea Zanella, Michele Zorzi, "An ns-3 Implementation of a Bursty Traffic Framework for Virtual Reality Sources," accepted to Workshop on ns-3 (WNS3), 2021, Preprint available: `arXiv:2103.04609 <https://arxiv.org/abs/2103.04609>`_.